import type { Express, Request, Response, NextFunction } from "express";
import express from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { authenticateUser, createUser, validateUsername, validatePassword } from "./auth";
import type { AuthenticatedRequest } from "./types";
import { 
  createNotionClient, 
  extractPageIdFromUrl, 
  createJournalDatabase, 
  addJournalEntryToNotion,
  getNotionDatabases 
} from "./notion";
import { syncJournalEntryToNotion, syncAllUserEntriesToNotion } from "./notion-sync";
import { generateAuthUrl, exchangeCodeForTokens, validateTokens, GOOGLE_SCOPES, createGoogleOAuthClient } from "./google-oauth";
import { createGoogleDoc, appendToGoogleDoc, listUserGoogleDocs, getGoogleDocInfo } from "./google-docs";
import { 
  insertJournalEntrySchema, 
  insertThemeSchema, 
  insertTagSchema,
  insertEntryTagSchema,
  insertSentimentAnalysisSchema
} from "@shared/schema";
import { analyzeJournalEntry, analyzeSentiment, extractTextFromImage } from "./openai";
import { retryFailedEntries } from "./retry-processing";
import multer from "multer";
import path from "path";
import fs from "fs/promises";
import { exec } from "child_process";
import { promisify } from "util";

const execAsync = promisify(exec);

// In-memory batch tracking
const activeBatches = new Map<string, number[]>();

// Sequential bulk processing function
async function processBulkEntriesSequentially(entries: any[], userId: number, batchId: string) {
  console.log(`Starting sequential processing of ${entries.length} entries for user ${userId}, batch ${batchId}`);
  
  for (let i = 0; i < entries.length; i++) {
    const entry = entries[i];
    console.log(`Processing entry ${i + 1}/${entries.length}: ${entry.id}`);
    
    try {
      const ocrResult = await extractTextFromImage(entry.filePath);
      
      if (ocrResult.text && ocrResult.text.trim().length > 0) {
        console.log(`OCR completed for entry ${entry.id}, analyzing...`);
        const analysisResult = await analyzeJournalEntry(ocrResult.text);
        const sentimentResult = await analyzeSentiment(ocrResult.text);

        await storage.updateJournalEntry(entry.id, {
          title: analysisResult.title || entry.title,
          transcribedText: ocrResult.text,
          ocrConfidence: ocrResult.confidence,
          processingStatus: "completed"
        });

        // Add themes
        for (const theme of analysisResult.themes) {
          await storage.createTheme({
            entryId: entry.id,
            title: theme.title,
            description: theme.description,
            confidence: Math.round(Number(theme.confidence))
          });
        }

        // Add tags
        for (const tagName of analysisResult.tags) {
          const tag = await storage.getOrCreateTag(tagName);
          await storage.addTagToEntry({
            entryId: entry.id,
            tagId: tag.id,
            confidence: 80,
            isAutoGenerated: true
          });
        }

        // Add sentiment analysis
        await storage.createSentimentAnalysis({
          entryId: entry.id,
          positiveScore: sentimentResult.positive,
          neutralScore: sentimentResult.neutral,
          concernScore: sentimentResult.concern,
          overallSentiment: sentimentResult.overall
        });

        // Sync to Notion if integration is enabled
        try {
          const completeEntry = await storage.getJournalEntry(entry.id);
          if (completeEntry) {
            await syncJournalEntryToNotion(completeEntry);
            console.log(`Entry ${entry.id} synced to Notion successfully`);
          }
        } catch (notionError) {
          console.error(`Notion sync failed for entry ${entry.id}:`, notionError);
        }

        console.log(`Entry ${entry.id} completed successfully`);
      } else {
        console.log(`No text extracted from entry ${entry.id}, marking as failed`);
        await storage.updateJournalEntry(entry.id, {
          processingStatus: "failed",
          transcribedText: "No readable text found in image"
        });
      }
    } catch (processingError) {
      console.error(`Processing error for entry ${entry.id}:`, processingError);
      const errorMessage = processingError instanceof Error ? processingError.message : "Unknown processing error";
      await storage.updateJournalEntry(entry.id, {
        processingStatus: "failed",
        transcribedText: `Processing failed: ${errorMessage}`
      });
    }
  }
  
  // Clean up batch tracking when complete
  activeBatches.delete(batchId);
  console.log(`Bulk processing completed for user ${userId}, batch ${batchId}`);
}

// Configure multer for file uploads
const upload = multer({
  storage: multer.diskStorage({
    destination: async (req, file, cb) => {
      const uploadDir = path.join(process.cwd(), 'uploads');
      try {
        await fs.mkdir(uploadDir, { recursive: true });
        cb(null, uploadDir);
      } catch (error) {
        cb(error as any, uploadDir);
      }
    },
    filename: (req, file, cb) => {
      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
      cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
    }
  }),
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB limit
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/heic', 'image/heif'];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('Only image files are allowed') as any, false);
    }
  }
});

// Authentication middleware
function requireAuth(req: Request, res: Response, next: NextFunction) {
  console.log("Auth check:", {
    hasSession: !!req.session,
    userId: req.session?.userId,
    sessionId: req.session?.id,
    path: req.path
  });
  
  if (!req.session?.userId) {
    console.log("Authentication failed - no session or userId");
    return res.status(401).json({ 
      message: "Authentication required",
      hasSession: !!req.session,
      sessionExists: req.session?.id ? true : false
    });
  }
  next();
}

export async function registerRoutes(app: Express): Promise<Server> {
  // Authentication routes
  app.post("/api/auth/login", async (req, res) => {
    try {
      const { username, password } = req.body;
      
      if (!username || !password) {
        return res.status(400).json({ message: "Username and password are required" });
      }

      const result = await authenticateUser(username, password);
      
      if (result.success && result.user) {
        req.session.userId = result.user.id;
        req.session.user = result.user;
        return res.json({ user: result.user });
      } else {
        return res.status(401).json({ message: result.error || "Invalid credentials" });
      }
    } catch (error) {
      console.error("Login error:", error);
      return res.status(500).json({ message: "Login failed" });
    }
  });

  app.post("/api/auth/register", async (req, res) => {
    try {
      const { username, password } = req.body;
      
      if (!username || !password) {
        return res.status(400).json({ message: "Username and password are required" });
      }

      const usernameValidation = validateUsername(username);
      if (!usernameValidation.valid) {
        return res.status(400).json({ message: usernameValidation.error });
      }

      const passwordValidation = validatePassword(password);
      if (!passwordValidation.valid) {
        return res.status(400).json({ message: passwordValidation.error });
      }

      const result = await createUser(username, password);
      
      if (result.success && result.user) {
        req.session.userId = result.user.id;
        req.session.user = result.user;
        return res.json({ user: result.user });
      } else {
        return res.status(400).json({ message: result.error || "Registration failed" });
      }
    } catch (error) {
      console.error("Registration error:", error);
      return res.status(500).json({ message: "Registration failed" });
    }
  });

  app.post("/api/auth/logout", (req, res) => {
    req.session.destroy((err) => {
      if (err) {
        return res.status(500).json({ message: "Logout failed" });
      }
      res.clearCookie('connect.sid');
      res.json({ message: "Logged out successfully" });
    });
  });

  app.get("/api/auth/me", (req, res) => {
    if (req.session?.userId && req.session?.user) {
      res.json({ user: req.session.user });
    } else {
      res.status(401).json({ message: "Not authenticated" });
    }
  });

  // Journal entry routes
  app.get("/api/journal-entries", requireAuth, async (req, res) => {
    try {
      const limit = parseInt(req.query.limit as string) || 10;
      const entries = await storage.getJournalEntriesByUser(req.session.userId!, limit);
      res.json(entries);
    } catch (error) {
      console.error("Get entries error:", error);
      res.status(500).json({ message: "Failed to fetch journal entries" });
    }
  });

  app.get("/api/journal-entries/:id", requireAuth, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const entry = await storage.getJournalEntry(id);
      
      if (!entry || entry.userId !== req.session.userId) {
        return res.status(404).json({ message: "Entry not found" });
      }
      
      res.json(entry);
    } catch (error) {
      console.error("Get entry error:", error);
      res.status(500).json({ message: "Failed to fetch journal entry" });
    }
  });

  app.get("/api/journal-entries/:id/status", requireAuth, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      
      const entry = await storage.getJournalEntry(id);
      if (!entry || entry.userId !== req.session.userId) {
        return res.status(404).json({ message: "Entry not found" });
      }

      res.json({
        id: entry.id,
        processingStatus: entry.processingStatus,
        transcribedText: entry.transcribedText,
        ocrConfidence: entry.ocrConfidence,
        title: entry.title,
        updatedAt: entry.updatedAt
      });
    } catch (error) {
      console.error("Status check error:", error);
      res.status(500).json({ message: "Failed to check status" });
    }
  });

  app.patch("/api/journal-entries/:id", requireAuth, async (req, res) => {
    console.log(`PATCH request received for entry ${req.params.id}`);
    console.log(`Request body:`, req.body);
    console.log(`Content-Type:`, req.headers['content-type']);
    
    try {
      const id = parseInt(req.params.id);
      const { title, transcribedText } = req.body;
      
      if (!transcribedText || typeof transcribedText !== 'string') {
        console.log(`Validation failed: transcribedText missing or invalid`);
        return res.status(400).json({ message: "Transcribed text is required" });
      }
      
      const entry = await storage.getJournalEntry(id);
      if (!entry || entry.userId !== req.session.userId) {
        console.log(`Entry not found or access denied for entry ${id}`);
        return res.status(404).json({ message: "Entry not found" });
      }

      console.log(`Updating entry ${id} with new text of length ${transcribedText.length}`);
      const updatedEntry = await storage.updateJournalEntry(id, {
        title,
        transcribedText: transcribedText.trim()
      });

      // Sync to Notion if integration is set up
      try {
        const updatedEntryWithDetails = await storage.getJournalEntry(id);
        if (updatedEntryWithDetails) {
          await syncJournalEntryToNotion(updatedEntryWithDetails);
          console.log(`Entry ${id} synced to Notion successfully`);
        }
      } catch (notionError) {
        console.error(`Notion sync failed for entry ${id}:`, notionError);
        // Don't fail the request if Notion sync fails
      }

      console.log(`Entry ${id} updated successfully`);
      res.json({
        message: "Entry updated successfully",
        entry: updatedEntry
      });
    } catch (error) {
      console.error("Edit entry error:", error);
      res.status(500).json({ message: "Failed to edit journal entry" });
    }
  });

  app.post("/api/journal-entries/:id/edit", requireAuth, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const { title, transcribedText } = req.body;
      
      const entry = await storage.getJournalEntry(id);
      if (!entry || entry.userId !== req.session.userId) {
        return res.status(404).json({ message: "Entry not found" });
      }

      const updatedEntry = await storage.updateJournalEntry(id, {
        title,
        transcribedText
      });

      res.json(updatedEntry);
    } catch (error) {
      console.error("Edit entry error:", error);
      res.status(500).json({ message: "Failed to edit journal entry" });
    }
  });

  app.delete("/api/journal-entries/:id", requireAuth, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      
      const entry = await storage.getJournalEntry(id);
      if (!entry || entry.userId !== req.session.userId) {
        return res.status(404).json({ message: "Entry not found" });
      }

      await storage.deleteJournalEntry(id);
      res.json({ message: "Entry deleted successfully" });
    } catch (error) {
      console.error("Delete entry error:", error);
      res.status(500).json({ message: "Failed to delete journal entry" });
    }
  });

  app.post("/api/upload", requireAuth, upload.single('journal'), async (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({ message: "No file uploaded" });
      }

      const userId = req.session.userId!;
      const { title } = req.body;

      // Convert absolute file path to web URL
      const filename = path.basename(req.file.path);
      const webImageUrl = `/uploads/${filename}`;

      const entry = await storage.createJournalEntry({
        userId,
        title: title || "Untitled Entry",
        originalImageUrl: webImageUrl,
        transcribedText: "",
        ocrConfidence: 0,
        processingStatus: "processing"
      });

      res.json(entry);

      // Process asynchronously
      try {
        console.log(`Starting OCR processing for entry ${entry.id}`);
        const ocrResult = await extractTextFromImage(req.file.path);
        console.log(`OCR completed for entry ${entry.id}, text length: ${ocrResult.text?.length || 0}`);
        
        if (ocrResult.text && ocrResult.text.trim().length > 0) {
          console.log(`Starting AI analysis for entry ${entry.id}`);
          const analysisResult = await analyzeJournalEntry(ocrResult.text);
          const sentimentResult = await analyzeSentiment(ocrResult.text);
          console.log(`AI analysis completed for entry ${entry.id}`);

          await storage.updateJournalEntry(entry.id, {
            title: analysisResult.title || entry.title,
            transcribedText: ocrResult.text,
            ocrConfidence: ocrResult.confidence,
            processingStatus: "completed"
          });

          // Add themes
          for (const theme of analysisResult.themes) {
            await storage.createTheme({
              entryId: entry.id,
              title: theme.title,
              description: theme.description,
              confidence: Math.round(Number(theme.confidence)) // Ensure integer 0-100
            });
          }

          // Add tags
          for (const tagName of analysisResult.tags) {
            const tag = await storage.getOrCreateTag(tagName);
            await storage.addTagToEntry({
              entryId: entry.id,
              tagId: tag.id,
              confidence: 80, // Convert 0.8 to percentage (80)
              isAutoGenerated: true
            });
          }

          // Add sentiment analysis
          await storage.createSentimentAnalysis({
            entryId: entry.id,
            positiveScore: sentimentResult.positive,
            neutralScore: sentimentResult.neutral,
            concernScore: sentimentResult.concern,
            overallSentiment: sentimentResult.overall
          });

          const completeEntry = await storage.getJournalEntry(entry.id);
          
          // Sync to Notion if enabled
          const notionIntegration = await storage.getUserIntegration(userId, "notion");
          if (notionIntegration?.isEnabled && completeEntry) {
            try {
              await syncJournalEntryToNotion(completeEntry);
            } catch (notionError) {
              console.error("Notion sync failed:", notionError);
            }
          }
        } else {
          console.log(`No text extracted from entry ${entry.id}, marking as failed`);
          await storage.updateJournalEntry(entry.id, {
            processingStatus: "failed",
            transcribedText: "No readable text found in image"
          });
        }
      } catch (processingError) {
        console.error(`Processing error for entry ${entry.id}:`, processingError);
        const errorMessage = processingError instanceof Error ? processingError.message : "Unknown processing error";
        await storage.updateJournalEntry(entry.id, {
          processingStatus: "failed",
          transcribedText: `Processing failed: ${errorMessage}`
        });
      }
    } catch (error) {
      console.error("Upload error:", error);
      res.status(500).json({ message: "Upload failed" });
    }
  });

  // Bulk upload with improved progress tracking (up to 100 files)
  app.post("/api/upload-bulk", requireAuth, upload.array('journals', 100), async (req, res) => {
    try {
      if (!req.files || !Array.isArray(req.files) || req.files.length === 0) {
        return res.status(400).json({ message: "No files uploaded" });
      }

      if (req.files.length > 100) {
        return res.status(400).json({ message: "Maximum 100 files allowed per batch" });
      }

      const userId = req.session.userId!;
      const batchId = `bulk_${Date.now()}_${userId}`;
      const entries = [];

      console.log(`Starting bulk upload of ${req.files.length} files for user ${userId}`);

      // Create database entries for all files first
      for (let i = 0; i < req.files.length; i++) {
        const file = req.files[i] as Express.Multer.File;
        const filename = path.basename(file.path);
        const webImageUrl = `/uploads/${filename}`;
        
        const entry = await storage.createJournalEntry({
          userId,
          title: file.originalname.replace(/\.[^/.]+$/, "") || `Upload ${i + 1}`,
          originalImageUrl: webImageUrl,
          transcribedText: "",
          ocrConfidence: 0,
          processingStatus: "processing"
        });
        entries.push({ ...entry, filePath: file.path });
      }

      // Store batch info for progress tracking
      const entryIds = entries.map(e => e.id);
      activeBatches.set(batchId, entryIds);

      // Respond immediately with entry IDs for progress tracking
      res.json({ 
        entries: entries.map(e => ({ ...e, filePath: undefined })),
        batchId,
        message: `${entries.length} files uploaded, processing sequentially...` 
      });

      // Process files sequentially in background
      processBulkEntriesSequentially(entries, userId, batchId);

    } catch (error) {
      console.error("Bulk upload error:", error);
      res.status(500).json({ message: "Bulk upload failed" });
    }
  });

  // Progress tracking endpoint
  app.get("/api/bulk-progress/:batchId", requireAuth, async (req, res) => {
    try {
      const { batchId } = req.params;
      const userId = req.session.userId!;
      
      // Get the specific entry IDs for this batch
      const batchEntryIds = activeBatches.get(batchId);
      
      if (!batchEntryIds) {
        // Batch not found or completed, return completed status
        return res.json({
          total: 0,
          completed: 0,
          failed: 0,
          processing: 0,
          progress: 100
        });
      }
      
      // Get the current status of each entry in this batch
      let completed = 0;
      let failed = 0;
      let processing = 0;
      
      for (const entryId of batchEntryIds) {
        try {
          const entry = await storage.getJournalEntry(entryId);
          if (entry && entry.userId === userId) {
            switch (entry.processingStatus) {
              case 'completed':
                completed++;
                break;
              case 'failed':
                failed++;
                break;
              case 'processing':
              default:
                processing++;
                break;
            }
          }
        } catch (entryError) {
          console.error(`Error checking entry ${entryId}:`, entryError);
          failed++;
        }
      }
      
      const total = batchEntryIds.length;
      const progress = total > 0 ? Math.round((completed + failed) / total * 100) : 100;
      
      res.json({
        total,
        completed,
        failed,
        processing,
        progress
      });
    } catch (error) {
      console.error("Progress tracking error:", error);
      res.status(500).json({ message: "Failed to get progress" });
    }
  });

  // Notion integration routes
  app.get("/api/integrations/notion", requireAuth, async (req, res) => {
    try {
      const integration = await storage.getUserIntegration(req.session.userId!, "notion");
      
      if (!integration) {
        return res.json({ enabled: false, configured: false });
      }

      res.json({
        enabled: integration.isEnabled,
        configured: !!integration.config,
        config: integration.config
      });
    } catch (error) {
      console.error("Get Notion integration error:", error);
      res.status(500).json({ message: "Failed to get Notion integration status" });
    }
  });

  app.post("/api/integrations/notion/configure", requireAuth, async (req, res) => {
    try {
      const { integrationToken, pageUrl } = req.body;
      
      if (!integrationToken || !pageUrl) {
        return res.status(400).json({ message: "Integration token and page URL are required" });
      }

      const notion = createNotionClient(integrationToken);
      const pageId = extractPageIdFromUrl(pageUrl);
      
      await createJournalDatabase(notion, pageId);

      const config = {
        integrationToken,
        pageUrl,
        pageId
      };

      const existingIntegration = await storage.getUserIntegration(req.session.userId!, "notion");
      
      if (existingIntegration) {
        await storage.updateUserIntegration(req.session.userId!, "notion", {
          config,
          isEnabled: true
        });
      } else {
        await storage.createUserIntegration({
          userId: req.session.userId!,
          integrationType: "notion",
          isEnabled: true,
          config
        });
      }

      res.json({ success: true, message: "Notion integration configured successfully" });
    } catch (error) {
      console.error("Configure Notion error:", error);
      res.status(500).json({ message: "Failed to configure Notion integration" });
    }
  });

  app.post("/api/integrations/notion/toggle", requireAuth, async (req, res) => {
    try {
      const { enabled } = req.body;
      
      const integration = await storage.getUserIntegration(req.session.userId!, "notion");
      
      if (!integration) {
        return res.status(404).json({ message: "Notion integration not found" });
      }

      await storage.updateUserIntegration(req.session.userId!, "notion", {
        isEnabled: enabled
      });

      res.json({
        enabled,
        message: enabled ? "Notion integration enabled" : "Notion integration disabled"
      });
    } catch (error) {
      console.error("Toggle Notion integration error:", error);
      res.status(500).json({ message: "Failed to toggle Notion integration" });
    }
  });

  app.post("/api/integrations/notion/sync-all", requireAuth, async (req, res) => {
    try {
      const integration = await storage.getUserIntegration(req.session.userId!, "notion");
      
      if (!integration || !integration.isEnabled) {
        return res.status(400).json({ message: "Notion integration not enabled" });
      }

      const result = await syncAllUserEntriesToNotion(req.session.userId!);
      
      res.json({ 
        message: `Sync completed: ${result.success} successful, ${result.failed} failed`,
        successCount: result.success,
        failedCount: result.failed
      });
    } catch (error) {
      console.error("Bulk sync error:", error);
      res.status(500).json({ 
        message: "Bulk sync failed. Please try again." 
      });
    }
  });

  // Retry failed entries
  app.post("/api/retry-failed", requireAuth, async (req, res) => {
    try {
      const result = await retryFailedEntries();
      res.json(result);
    } catch (error) {
      console.error("Retry failed entries error:", error);
      res.status(500).json({ message: "Failed to retry processing" });
    }
  });

  app.get("/api/failed-entries-count", requireAuth, async (req, res) => {
    try {
      const failedEntries = await storage.getFailedEntries();
      res.json({ count: failedEntries.length });
    } catch (error) {
      console.error("Get failed entries count error:", error);
      res.status(500).json({ message: "Failed to get failed entries count" });
    }
  });

  // Tags routes
  app.get("/api/tags", requireAuth, async (req, res) => {
    try {
      const tags = await storage.getAllTags();
      res.json(tags);
    } catch (error) {
      console.error("Get tags error:", error);
      res.status(500).json({ message: "Failed to fetch tags" });
    }
  });

  // Google Docs integration routes
  app.get("/api/integrations/google-docs", requireAuth, async (req, res) => {
    try {
      const credentials = await storage.getGoogleDocsCredentials(req.session.userId!);
      
      if (!credentials) {
        return res.json({ enabled: false, configured: false });
      }

      // Check if credentials are still valid
      const isValid = await validateTokens(credentials);
      
      res.json({
        enabled: true,
        configured: isValid,
        needsReauth: !isValid
      });
    } catch (error) {
      console.error("Get Google Docs integration error:", error);
      res.status(500).json({ message: "Failed to get Google Docs integration status" });
    }
  });

  app.get("/api/google/auth", requireAuth, async (req, res) => {
    try {
      console.log("=== Starting Google OAuth Flow ===");
      console.log("Authenticated user ID:", req.session.userId);
      
      const state = JSON.stringify({ userId: req.session.userId });
      const authUrl = generateAuthUrl(state);
      
      console.log("Generated auth URL:", authUrl);
      console.log("State parameter:", state);
      
      res.json({ authUrl });
    } catch (error) {
      console.error("Google auth URL generation error:", error);
      res.status(500).json({ message: "Failed to generate Google auth URL" });
    }
  });

  // Test endpoint to verify callback URL is accessible
  app.get("/api/google/auth/callback/test", async (req, res) => {
    console.log("Test callback endpoint hit");
    res.json({
      message: "Callback URL is accessible",
      timestamp: new Date().toISOString(),
      query: req.query,
      headers: req.headers
    });
  });

  // Additional debug route to check current OAuth configuration
  app.get("/api/google/debug", async (req, res) => {
    const oauth2Client = createGoogleOAuthClient();
    res.json({
      redirectUri: 'https://journal-ai-insights.replit.app/api/google/auth/callback',
      hasClientId: !!process.env.GOOGLE_CLIENT_ID,
      hasClientSecret: !!process.env.GOOGLE_CLIENT_SECRET,
      replitDomains: process.env.REPLIT_DOMAINS,
      currentHost: req.get('host')
    });
  });

  app.get("/api/google/auth/callback", async (req, res) => {
    try {
      console.log("=== Google OAuth Callback Debug ===");
      console.log("Environment:", {
        NODE_ENV: process.env.NODE_ENV,
        REPLIT_DEPLOYMENT: process.env.REPLIT_DEPLOYMENT,
        host: req.get('host'),
        protocol: req.protocol
      });
      console.log("Query params:", req.query);
      console.log("User agent:", req.get('user-agent'));
      console.log("Referer:", req.get('referer'));
      
      const { code, state, error } = req.query;
      
      if (error) {
        console.error("OAuth error from Google:", error);
        return res.redirect("/settings/integrations?error=" + encodeURIComponent(error as string));
      }
      
      if (!code || !state) {
        console.error("Missing code or state:", { code: !!code, state: !!state });
        return res.redirect("/settings/integrations?error=missing_params");
      }

      console.log("Parsing state:", state);
      let userId;
      try {
        const parsedState = JSON.parse(state as string);
        userId = parsedState.userId;
        console.log("User ID from state:", userId);
      } catch (parseError) {
        console.error("Failed to parse state:", parseError);
        return res.redirect("/settings/integrations?error=invalid_state");
      }
      
      if (!userId) {
        console.error("No userId found in state");
        return res.redirect("/settings/integrations?error=no_user_id");
      }
      
      console.log("Exchanging code for tokens...");
      const tokens = await exchangeCodeForTokens(code as string);
      console.log("Tokens received:", { 
        hasAccessToken: !!tokens.access_token,
        hasRefreshToken: !!tokens.refresh_token,
        expiryDate: tokens.expiry_date 
      });

      if (!tokens.access_token) {
        console.error("No access token received");
        return res.redirect("/settings/integrations?error=no_access_token");
      }

      if (!tokens.refresh_token) {
        console.error("No refresh token received - user may need to revoke and re-authorize");
        return res.redirect("/settings/integrations?error=no_refresh_token");
      }

      // Store credentials in database
      const credentials = {
        userId,
        accessToken: tokens.access_token,
        refreshToken: tokens.refresh_token,
        tokenType: tokens.token_type || 'Bearer',
        expiryDate: tokens.expiry_date ? new Date(tokens.expiry_date) : new Date(Date.now() + 3600000),
        scope: GOOGLE_SCOPES.join(' ')
      };

      console.log("Checking for existing credentials...");
      const existingCredentials = await storage.getGoogleDocsCredentials(userId);
      
      if (existingCredentials) {
        console.log("Updating existing credentials");
        await storage.updateGoogleDocsCredentials(userId, {
          accessToken: credentials.accessToken,
          refreshToken: credentials.refreshToken,
          tokenType: credentials.tokenType,
          expiryDate: credentials.expiryDate,
          scope: credentials.scope
        });
      } else {
        console.log("Creating new credentials");
        await storage.createGoogleDocsCredentials(credentials);
      }

      console.log("Credentials saved successfully, redirecting...");
      res.redirect("/settings/integrations?google_connected=true");
    } catch (error) {
      console.error("Google auth callback error:", error);
      console.error("Error stack:", error instanceof Error ? error.stack : 'No stack trace');
      res.redirect("/settings/integrations?error=auth_failed&details=" + encodeURIComponent(error instanceof Error ? error.message : 'Unknown error'));
    }
  });

  app.delete("/api/integrations/google-docs", requireAuth, async (req, res) => {
    try {
      await storage.deleteGoogleDocsCredentials(req.session.userId!);
      res.json({ message: "Google Docs integration disconnected" });
    } catch (error) {
      console.error("Google Docs disconnect error:", error);
      res.status(500).json({ message: "Failed to disconnect Google Docs" });
    }
  });

  app.get("/api/google-docs/documents", requireAuth, async (req, res) => {
    try {
      const credentials = await storage.getGoogleDocsCredentials(req.session.userId!);
      
      if (!credentials) {
        return res.status(400).json({ message: "Google Docs not connected" });
      }

      const documents = await listUserGoogleDocs(credentials);
      res.json({ documents });
    } catch (error) {
      console.error("List Google Docs error:", error);
      res.status(500).json({ message: "Failed to list Google Docs" });
    }
  });

  app.post("/api/google-docs/sync", requireAuth, async (req, res) => {
    try {
      const { entryId, syncMode, documentId } = req.body;
      
      const credentials = await storage.getGoogleDocsCredentials(req.session.userId!);
      if (!credentials) {
        return res.status(400).json({ message: "Google Docs not connected" });
      }

      const entry = await storage.getJournalEntry(entryId);
      if (!entry || entry.userId !== req.session.userId) {
        return res.status(404).json({ message: "Entry not found" });
      }

      let docInfo;
      
      if (syncMode === 'new') {
        // Create new document
        const title = `Journal Entry - ${entry.title}`;
        docInfo = await createGoogleDoc(credentials, title);
        await appendToGoogleDoc(credentials, docInfo.id, entry);
      } else if (syncMode === 'append' && documentId) {
        // Append to existing document
        docInfo = await getGoogleDocInfo(credentials, documentId);
        await appendToGoogleDoc(credentials, documentId, entry);
      } else if (syncMode === 'last') {
        // Append to last used document
        const lastEntry = await storage.getLastGoogleDocsEntryByUser(req.session.userId!);
        if (lastEntry) {
          docInfo = await getGoogleDocInfo(credentials, lastEntry.documentId);
          await appendToGoogleDoc(credentials, lastEntry.documentId, entry);
        } else {
          // Create new if no last document
          const title = `Journal Entry - ${entry.title}`;
          docInfo = await createGoogleDoc(credentials, title);
          await appendToGoogleDoc(credentials, docInfo.id, entry);
        }
      }

      if (docInfo) {
        // Store the Google Docs entry
        await storage.createGoogleDocsEntry({
          userId: req.session.userId!,
          journalEntryId: entryId,
          documentId: docInfo.id,
          documentTitle: docInfo.title,
          documentUrl: docInfo.url
        });

        res.json({
          success: true,
          documentUrl: docInfo.url,
          documentTitle: docInfo.title
        });
      } else {
        res.status(400).json({ message: "Failed to sync to Google Docs" });
      }
    } catch (error) {
      console.error("Google Docs sync error:", error);
      res.status(500).json({ message: "Failed to sync to Google Docs" });
    }
  });

  // Bulk delete endpoint
  app.post("/api/journal-entries/bulk-delete", requireAuth, async (req, res) => {
    try {
      const { entryIds } = req.body;
      
      if (!Array.isArray(entryIds) || entryIds.length === 0) {
        return res.status(400).json({ message: "Entry IDs array is required" });
      }

      let deletedCount = 0;
      const errors: string[] = [];

      for (const entryId of entryIds) {
        try {
          // Verify entry belongs to user
          const entry = await storage.getJournalEntry(entryId);
          if (!entry || entry.userId !== req.session.userId) {
            errors.push(`Entry ${entryId} not found or unauthorized`);
            continue;
          }

          await storage.deleteJournalEntry(entryId);
          deletedCount++;
        } catch (error) {
          console.error(`Error deleting entry ${entryId}:`, error);
          errors.push(`Failed to delete entry ${entryId}`);
        }
      }

      res.json({ 
        deletedCount,
        requestedCount: entryIds.length,
        errors: errors.length > 0 ? errors : undefined
      });
    } catch (error) {
      console.error("Bulk delete error:", error);
      res.status(500).json({ message: "Failed to delete entries" });
    }
  });

  // Health check endpoint
  app.get("/api/health", (req, res) => {
    res.json({ 
      status: "ok", 
      timestamp: new Date().toISOString()
    });
  });

  const httpServer = createServer(app);
  return httpServer;
}