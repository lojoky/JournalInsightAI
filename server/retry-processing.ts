import { storage } from "./storage";
import { extractTextFromImage, analyzeJournalEntry, analyzeSentiment } from "./openai";
import path from "path";
import fs from "fs/promises";

export async function retryFailedEntries() {
  console.log("Starting retry process for failed entries...");
  
  try {
    // Get all entries that failed processing (pending status or missing transcription)
    const failedEntries = await storage.getFailedEntries();
    console.log(`Found ${failedEntries.length} failed entries to retry`);
    
    let successCount = 0;
    let failureCount = 0;
    
    for (const entry of failedEntries) {
      console.log(`Retrying entry ${entry.id}: ${entry.title}`);
      
      try {
        // Check if image file exists
        const imagePath = path.join(process.cwd(), entry.originalImageUrl!);
        
        try {
          await fs.access(imagePath);
        } catch {
          console.log(`Image file not found for entry ${entry.id}, skipping...`);
          await storage.updateJournalEntry(entry.id, { processingStatus: "failed" });
          failureCount++;
          continue;
        }
        
        // Step 1: Extract text if missing
        if (!entry.transcribedText) {
          console.log(`Extracting text for entry ${entry.id}...`);
          const ocrResult = await extractTextFromImage(imagePath);
          
          if (!ocrResult.text || ocrResult.text.trim().length === 0) {
            console.log(`No text found in image for entry ${entry.id}`);
            await storage.updateJournalEntry(entry.id, { 
              processingStatus: "failed",
              transcribedText: "No readable text found in image"
            });
            failureCount++;
            continue;
          }
          
          await storage.updateJournalEntry(entry.id, {
            transcribedText: ocrResult.text,
            ocrConfidence: ocrResult.confidence,
            processingStatus: "transcribed"
          });
        }
        
        // Step 2: Get updated entry with transcription
        const updatedEntry = await storage.getJournalEntry(entry.id);
        if (!updatedEntry?.transcribedText) {
          console.log(`Failed to get transcribed text for entry ${entry.id}`);
          failureCount++;
          continue;
        }
        
        // Step 3: Perform AI analysis
        console.log(`Analyzing entry ${entry.id}...`);
        const analysis = await analyzeJournalEntry(updatedEntry.transcribedText);
        const sentiment = await analyzeSentiment(updatedEntry.transcribedText);
        
        // Step 4: Save themes
        const themes = await Promise.all(
          analysis.themes.map(theme => 
            storage.createTheme({
              entryId: entry.id,
              title: theme.title,
              description: theme.description,
              confidence: theme.confidence
            })
          )
        );
        
        // Step 5: Save sentiment analysis
        await storage.createSentimentAnalysis({
          entryId: entry.id,
          positiveScore: sentiment.positive,
          neutralScore: sentiment.neutral,
          concernScore: sentiment.concern,
          overallSentiment: sentiment.overall
        });
        
        // Step 6: Process and save tags
        const tagPromises = analysis.tags.map(async (tagName) => {
          const tag = await storage.getOrCreateTag(tagName.toLowerCase());
          await storage.addTagToEntry({
            entryId: entry.id,
            tagId: tag.id,
            confidence: 85,
            isAutoGenerated: true
          });
          return tag;
        });
        
        await Promise.all(tagPromises);
        
        // Step 7: Update entry with AI-generated title and mark as completed
        await storage.updateJournalEntry(entry.id, {
          title: analysis.title,
          processingStatus: "completed"
        });
        
        console.log(`Successfully processed entry ${entry.id}: ${analysis.title}`);
        successCount++;
        
      } catch (error) {
        console.error(`Failed to retry entry ${entry.id}:`, error);
        await storage.updateJournalEntry(entry.id, { processingStatus: "failed" });
        failureCount++;
      }
    }
    
    console.log(`Retry process completed. Success: ${successCount}, Failed: ${failureCount}`);
    return { successCount, failureCount, totalProcessed: failedEntries.length };
    
  } catch (error) {
    console.error("Error in retry process:", error);
    throw error;
  }
}