import { pgTable, text, serial, integer, boolean, timestamp, jsonb, varchar, index } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";
import { relations } from "drizzle-orm";

// Session storage table for authentication
export const sessions = pgTable(
  "sessions",
  {
    sid: varchar("sid").primaryKey(),
    sess: jsonb("sess").notNull(),
    expire: timestamp("expire").notNull(),
  },
  (table) => [index("IDX_session_expire").on(table.expire)],
);

// User storage table for Replit Auth
export const users = pgTable("users", {
  id: varchar("id").primaryKey().notNull(),
  email: varchar("email").unique(),
  firstName: varchar("first_name"),
  lastName: varchar("last_name"),
  profileImageUrl: varchar("profile_image_url"),
  notionIntegrationSecret: varchar("notion_integration_secret"),
  notionPageUrl: varchar("notion_page_url"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const journalEntries = pgTable("journal_entries", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull(),
  title: text("title").notNull(),
  originalImageUrl: text("original_image_url"),
  transcribedText: text("transcribed_text"),
  ocrConfidence: integer("ocr_confidence"), // percentage 0-100
  processingStatus: text("processing_status").notNull().default("pending"), // pending, processing, completed, failed
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

export const themes = pgTable("themes", {
  id: serial("id").primaryKey(),
  entryId: integer("entry_id").notNull(),
  title: text("title").notNull(),
  description: text("description"),
  confidence: integer("confidence"), // percentage 0-100
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const tags = pgTable("tags", {
  id: serial("id").primaryKey(),
  name: text("name").notNull().unique(),
  category: text("category"), // faith, career, relationships, etc.
  color: text("color").default("#6366F1"),
  isCustom: boolean("is_custom").default(false),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const entryTags = pgTable("entry_tags", {
  id: serial("id").primaryKey(),
  entryId: integer("entry_id").notNull(),
  tagId: integer("tag_id").notNull(),
  confidence: integer("confidence"), // percentage 0-100 for auto-generated tags
  isAutoGenerated: boolean("is_auto_generated").default(true),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const sentimentAnalysis = pgTable("sentiment_analysis", {
  id: serial("id").primaryKey(),
  entryId: integer("entry_id").notNull(),
  positiveScore: integer("positive_score").notNull(), // percentage 0-100
  neutralScore: integer("neutral_score").notNull(), // percentage 0-100
  concernScore: integer("concern_score").notNull(), // percentage 0-100
  overallSentiment: text("overall_sentiment").notNull(), // positive, neutral, negative
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Relations
export const usersRelations = relations(users, ({ many }) => ({
  journalEntries: many(journalEntries),
}));

export const journalEntriesRelations = relations(journalEntries, ({ one, many }) => ({
  user: one(users, {
    fields: [journalEntries.userId],
    references: [users.id],
  }),
  themes: many(themes),
  entryTags: many(entryTags),
  sentimentAnalysis: one(sentimentAnalysis),
}));

export const themesRelations = relations(themes, ({ one }) => ({
  entry: one(journalEntries, {
    fields: [themes.entryId],
    references: [journalEntries.id],
  }),
}));

export const tagsRelations = relations(tags, ({ many }) => ({
  entryTags: many(entryTags),
}));

export const entryTagsRelations = relations(entryTags, ({ one }) => ({
  entry: one(journalEntries, {
    fields: [entryTags.entryId],
    references: [journalEntries.id],
  }),
  tag: one(tags, {
    fields: [entryTags.tagId],
    references: [tags.id],
  }),
}));

export const sentimentAnalysisRelations = relations(sentimentAnalysis, ({ one }) => ({
  entry: one(journalEntries, {
    fields: [sentimentAnalysis.entryId],
    references: [journalEntries.id],
  }),
}));

// Type for upsert operations (Replit Auth)
export type UpsertUser = typeof users.$inferInsert;

// Insert schemas
export const insertUserSchema = createInsertSchema(users).omit({
  createdAt: true,
  updatedAt: true,
});

export const insertJournalEntrySchema = createInsertSchema(journalEntries).pick({
  userId: true,
  title: true,
  originalImageUrl: true,
  transcribedText: true,
  ocrConfidence: true,
  processingStatus: true,
});

export const insertThemeSchema = createInsertSchema(themes).pick({
  entryId: true,
  title: true,
  description: true,
  confidence: true,
});

export const insertTagSchema = createInsertSchema(tags).pick({
  name: true,
  category: true,
  color: true,
  isCustom: true,
});

export const insertEntryTagSchema = createInsertSchema(entryTags).pick({
  entryId: true,
  tagId: true,
  confidence: true,
  isAutoGenerated: true,
});

export const insertSentimentAnalysisSchema = createInsertSchema(sentimentAnalysis).pick({
  entryId: true,
  positiveScore: true,
  neutralScore: true,
  concernScore: true,
  overallSentiment: true,
});

// Types
export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect;

export type InsertJournalEntry = z.infer<typeof insertJournalEntrySchema>;
export type JournalEntry = typeof journalEntries.$inferSelect;

export type InsertTheme = z.infer<typeof insertThemeSchema>;
export type Theme = typeof themes.$inferSelect;

export type InsertTag = z.infer<typeof insertTagSchema>;
export type Tag = typeof tags.$inferSelect;

export type InsertEntryTag = z.infer<typeof insertEntryTagSchema>;
export type EntryTag = typeof entryTags.$inferSelect;

export type InsertSentimentAnalysis = z.infer<typeof insertSentimentAnalysisSchema>;
export type SentimentAnalysis = typeof sentimentAnalysis.$inferSelect;

// Enhanced types for API responses
export type JournalEntryWithDetails = JournalEntry & {
  themes: Theme[];
  tags: (Tag & { confidence?: number; isAutoGenerated?: boolean })[];
  sentimentAnalysis?: SentimentAnalysis;
};
